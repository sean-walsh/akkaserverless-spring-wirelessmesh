syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "cloudstate/entity_key.proto";

/**
* This is where we define our service and how the outside world will interact with our user function.
**/
package wirelessmesh;

/**
* The following section contains the message definitions needed for the service below.
**/

message AddCustomerLocationCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true]; // We must specify that this is the unique key for the entity.
    string accessToken = 2;
}

message RemoveCustomerLocationCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
}

message ActivateDeviceCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message AssignRoomCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
    string room = 3;
}

message RemoveDeviceCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message ToggleNightlightCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
    string deviceId = 2;
}

message GetCustomerLocationCommand {
    string customerLocationId = 1 [(.cloudstate.entity_key) = true];
}

message Device {
    string deviceId = 1;
    bool activated = 2;
    string customerLocationId = 3;
    string room = 4;
    bool nightlightOn = 5;
}

message CustomerLocation {
    string customerLocationId = 1;
    string accessToken = 2;
    bool added = 3;
    bool removed = 4;
    repeated Device devices = 5;
}

/**
* The service definition. Note: GRPC is the default mechanism, but the google.api.http option gives us http capability
* for free.
**/
service WirelessmeshService {
    rpc AddCustomerLocation(AddCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/add-customer-location",
            body: "*",
        };
    }

    rpc RemoveCustomerLocation(RemoveCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-customer-location",
            body: "*",
        };
    }

    rpc ActivateDevice(ActivateDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/activate-device",
            body: "*",
        };
    }

    rpc RemoveDevice(RemoveDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-device",
            body: "*",
        };
    }

    rpc AssignRoom(AssignRoomCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/assign-room",
            body: "*",
        };
    }

    rpc GetCustomerLocation(GetCustomerLocationCommand) returns (CustomerLocation) {
        option (google.api.http) = {
            get: "/wirelessmesh/get-customer-location",
        };
    }

    rpc ToggleNightlight(ToggleNightlightCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/toggle-nightlight",
            body: "*",
        };
    }
}
